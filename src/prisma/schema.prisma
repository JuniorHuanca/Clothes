datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id             String      @id @unique
  description    String
  deliveryUserId String?
  deliveryUser   User?       @relation(fields: [deliveryUserId], references: [id])
  userId         String
  user           User        @relation("PaidByUser", fields: [userId], references: [id])
  products       OrderItem[]
  totalPrice     Int
  status         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  size        String
  product     Product  @relation(fields: [productSlug], references: [slug])
  productSlug String
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  cart           Cart?
  roleId         Int
  role           Role      @relation(fields: [roleId], references: [id])
  sessions       Session[]
  accounts       Account[]
  assignedOrders Order[]
  orders         Order[]   @relation("PaidByUser")
}

model Role {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  routes String[]
  users  User[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  products  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  slug        String      @id @unique
  description String
  images      String[]
  inStock     Int
  price       Int
  sizes       String[]
  type        String
  tags        String[]
  title       String
  gender      String
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model CartItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  size        String
  product     Product  @relation(fields: [productSlug], references: [slug], onDelete: Cascade)
  productSlug String
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productSlug, size, cartId])
}
